{"version":3,"sources":["components/Grid/Grid.js","components/Jumbotron/Jumbotron.js","utils/API.js","components/Nav/Nav.js","components/List/List.js","components/inputSearch/inputSearch.js","components/SubButton/SubButton.js","pages/Home.js","pages/Saved.js","App.js","registerServiceWorker.js","index.js"],"names":["Container","fluid","children","className","Jumbotron","query","axios","get","id","bookData","Nav","href","List","props","key","src","thumbnail","alt","title","author","description","previewLink","Input","SubButton","Home","state","books","search","filterbooks","API","then","res","setState","data","items","catch","err","console","log","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","savedBooks","this","type","placeholder","onChange","onClick","map","volumeInfo","authors","imageLinks","Component","Saved","getbooks","deleteBook","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.daba9d2d.chunk.js","sourcesContent":["import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n    return (\n      <div\n        className=\"jumbotron\"\n      >\n        {children}\n      </div>\n    );\n  }\n  \n  export default Jumbotron;","import axios from \"axios\";\n\nexport default {\n    googlebooks: function(query){\n        return axios.get(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n    },\n    getBook: function(id){\n        return axios.get(\"/api/books/\"+id);\n    },\n    getBooks: function(){\n        return axios.get(\"/api/books/\");\n    },\n    deleteBook: function(id){\n        return axios.get(\"/api/books/\"+id);\n    },\n    saveBook: function(bookData){\n        return axios.get(\"/api/books\", bookData);\n    },\n\n}","import React from \"react\";\n\nfunction Nav() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <a className=\"navbar-brand\" href=\"/\">\n        HOME\n      </a>\n      <div>\n      <a className=\"navbar-brand\" href=\"/Saved\">\n        SAVED\n      </a>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\n\n\nexport function List(props) {\n    return (\n        <div key={props.id}>\n      <div className=\"list-overflow-container\">\n        \n        <img src={props.thumbnail} className=\"rounded float-start\"  alt=\"...\"/>\n  <div className=\"card-body\">\n    <h5 className=\"card-title\">{props.title}</h5>\n    <h5 className=\"card-title\">{props.author}</h5>\n    <p className=\"card-text\">{props.description}</p>\n    <a href={props.previewLink} className=\"btn btn-primary\">VIEW BOOK</a>\n      </div>\n      </div>\n      </div>\n    );\n\n  }\n                           \n    \n\n\nexport default List;\n","import React from \"react\";\n\nexport function Input(props) {\n    return (\n      <div className=\"form-group\">\n        <input className=\"form-control\" {...props} />\n      </div>\n    );\n  }\n","import React from 'react'\n\nexport function SubButton(props) {\n    return(\n    <button{...props} className=\"btn btn-danger\">SUBMIT</button>\n    )\n}\n\nexport function SaveButton(props) {\n    return(\n    <button{...props}  className=\"btn btn-danger\">SAVE BOOKS</button>\n    )\n}\n","import { Container } from \"../components/Grid/Grid\";\nimport Jumbotron from \"../components/Jumbotron/Jumbotron\";\nimport API from \"../utils/API\";\nimport Nav from \"../components/Nav/Nav\";\nimport {List} from \"../components/List/List\";\nimport React,{ Component } from \"react\";\nimport  {Input}from \"../components/inputSearch/inputSearch\";\nimport { SubButton} from \"../components/SubButton/SubButton\";\n\nclass Home extends Component {\n    state = {\n        books:[],\n        search:\"\"\n    };\n    filterbooks = () =>{\n        API.googlebooks(this.state.search)\n        .then(res =>{\n        this.setState({\n            books: res.data.items,\n            search:\"\"\n        })})\n        \n        .catch(err =>console.log(err));\n        \n    };\n    handleInputChange = event => {\n        const {name,value} = event.target;\n        this.setState({\n            [name]:value\n        });\n        console.log(value)\n    };\n    handleFormSubmit = event => {\n        event.preventDefault();\n        this.filterbooks();\n    };\n    savedBooks = data => {\n        API.saveBook(data)\n        .catch(err => console.log(err));\n    }\n\n    render(){\n        return(\n         <div>\n             <Nav/>\n             <Container fluid>\n             <Jumbotron>\n                 <h1>Search Books</h1>\n                 <h1>Search and save your favorite books!</h1>\n             </Jumbotron>\n             <form>\n             <Input\n                value={this.search}\n                type=\"text\"\n                name=\"search\"\n                placeholder=\"Title (required)\"\n                onChange={this.handleInputChange}\n              />\n                <SubButton onClick={this.handleFormSubmit}/>\n             </form>\n             {this.state.books.map(books => {\n                 return(\n               <List\n                key={books.id}\n                title={books.volumeInfo.title}\n                author={books.volumeInfo.authors}\n                id={books.id}\n                href={books.volumeInfo.previewLink}\n                thumbnail={books.volumeInfo.imageLinks.thumbnail}\n                description={books.volumeInfo.description}     \n               />\n                 )\n            })}\n           </Container>\n       </div>\n        );\n\n}\n}\n\nexport default Home\n\n","import React,{Component} from \"react\";\nimport { Container } from \"../components/Grid/Grid\";\nimport Jumbotron from \"../components/Jumbotron/Jumbotron\";\nimport API from \"../utils/API\";\nimport Nav from \"../components/Nav/Nav\";\n// import {List} from \"../components/List/List\";\n\nclass Saved extends Component{\n\n    state = {\n        books:[]\n    };\n    componentDidMount(){\n        this.getbooks();\n    }\n    getbooks = () =>{\n        API.getBooks()\n        .then(res =>{\n        this.setState({\n            books: res.data.items\n        })  \n    })\n    .catch(err =>console.log(err));\n    };\n    deleteBook = id => {\n        API.deleteBook(id).then(res => {\n            this.books({});\n        })\n        .catch(err =>console.log(err));\n    };\n    render(){\n        return(\n         <div>\n             <Nav/>\n             <Container fluid>\n             <Jumbotron>\n                 <h1>Search Books</h1>\n             </Jumbotron>\n             \n             \n           </Container>\n       </div>\n   )\n}\n}\n\nexport default Saved","import React, { Component } from \"react\";\nimport Home from \"./pages/Home\";\nimport Saved from \"./pages/Saved\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nclass App extends Component{\nrender() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Switch>\n        <Route exact path = \"/\" component = {Home}/>\n        <Route exact path = \"/saved\" component = {Saved}/>\n      </Switch>\n      \n    </div>\n    </Router>\n  );\n}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}